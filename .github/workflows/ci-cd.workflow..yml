name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Authentication Service CI (Build and Push Docker Image)
  authentication-service-ci:
    name: üê≥ Authentication Service - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Authentication Service
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for Authentication Service
        run: npm install
        working-directory: ./authentication-service

      - name: Build Docker image for Authentication Service
        run: docker build -t authentication-service ./authentication-service

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Authentication Service to Docker Hub
        run: |
          docker tag authentication-service ${{ secrets.DOCKER_USERNAME }}/authentication-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/authentication-service:latest

  # Video Streaming Service CI (Build and Push Docker Image)
  video-streaming-service-ci:
    name: üé• Video Service - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Video Service
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for Video Service
        run: npm install
        working-directory: ./video-streaming-service

      - name: Build Docker image for Video Service
        run: docker build -t video-streaming-service ./video-streaming-service

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Video Service to Docker Hub
        run: |
          docker tag video-streaming-service ${{ secrets.DOCKER_USERNAME }}/video-streaming-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/video-streaming-service:latest

  # API Gateway CI (Build and Push Docker Image)
  api-gateway-ci:
    name: üö™ API Gateway - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for API Gateway
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for API Gateway
        run: npm install
        working-directory: ./api-gateway

      - name: Build Docker image for API Gateway
        run: docker build -t api-gateway ./api-gateway

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push API Gateway to Docker Hub
        run: |
          docker tag api-gateway ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

  # Watchlist Service CI (Build and Push Docker Image)
  watchlist-service-ci:
    name: üì∫ Watchlist Service - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for Watchlist Service
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for Watchlist Service
        run: npm install
        working-directory: ./watchlist-service

      - name: Build Docker image for Watchlist Service
        run: docker build -t watchlist-service ./watchlist-service

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Watchlist Service to Docker Hub
        run: |
          docker tag watchlist-service ${{ secrets.DOCKER_USERNAME }}/watchlist-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/watchlist-service:latest

  # Authentication Service CD (Deploy to EC2)
  authentication-service-cd:
    needs: authentication-service-ci
    runs-on: ubuntu-latest
    name: üöÄ Authentication Service - Deploy to EC2
    steps:
      - name: Pull Authentication Service Image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/authentication-service:latest

      - name: Delete Old Authentication Service Container (if exists)
        run: sudo docker rm -f authentication-service-container || true

      - name: Run Authentication Service on EC2 Instance
        run: |
          sudo docker run -d -p 3000:3000 --name authentication-service-container \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_REGION="${{ secrets.AWS_S3_REGION }}" \
            -e AWS_USER_POOL_ID="${{ secrets.AWS_USER_POOL_ID }}" \
            -e AWS_CLIENT_ID="${{ secrets.AWS_CLIENT_ID }}" \
            ${{ secrets.DOCKER_USERNAME }}/authentication-service:latest

  # Video Streaming Service CD (Deploy to EC2)
  video-streaming-service-cd:
    needs: video-streaming-service-ci
    runs-on: ubuntu-latest
    name: üé¨ Video Streaming Service - Deploy to EC2
    steps:
      - name: Pull Video Streaming Service Image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/video-streaming-service:latest

      - name: Delete Old Video Streaming Service Container (if exists)
        run: sudo docker rm -f video-streaming-service-container || true

      - name: Run Video Streaming Service on EC2 Instance
        run: |
          sudo docker run -d -p 3001:3000 --name video-streaming-service-container \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_REGION="${{ secrets.AWS_S3_REGION }}" \
            -e AWS_USER_POOL_ID="${{ secrets.AWS_USER_POOL_ID }}" \
            -e AWS_CLIENT_ID="${{ secrets.AWS_CLIENT_ID }}" \
            ${{ secrets.DOCKER_USERNAME }}/video-streaming-service:latest

  # API Gateway CD (Deploy to EC2)
  api-gateway-cd:
    needs: api-gateway-ci
    runs-on: ubuntu-latest
    name: üõ°Ô∏è API Gateway - Deploy to EC2
    steps:
      - name: Pull API Gateway Image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

      - name: Delete Old API Gateway Container (if exists)
        run: sudo docker rm -f api-gateway-container || true

      - name: Run API Gateway on EC2 Instance
        run: |
          sudo docker run -d -p 8080:80 --name api-gateway-container \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_REGION="${{ secrets.AWS_S3_REGION }}" \
            -e AWS_USER_POOL_ID="${{ secrets.AWS_USER_POOL_ID }}" \
            -e AWS_CLIENT_ID="${{ secrets.AWS_CLIENT_ID }}" \
            ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

  # Watchlist Service CD (Deploy to EC2)
  watchlist-service-cd:
    needs: watchlist-service-ci
    runs-on: ubuntu-latest
    name: üì∫ Watchlist Service - Deploy to EC2
    steps:
      - name: Pull Watchlist Service Image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/watchlist-service:latest

      - name: Delete Old Watchlist Service Container (if exists)
        run: sudo docker rm -f watchlist-service-container || true

      - name: Run Watchlist Service on EC2 Instance
        run: |
          sudo docker run -d -p 3002:3000 --name watchlist-service-container \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_S3_REGION="${{ secrets.AWS_S3_REGION }}" \
            -e AWS_USER_POOL_ID="${{ secrets.AWS_USER_POOL_ID }}" \
            -e AWS_CLIENT_ID="${{ secrets.AWS_CLIENT_ID }}" \
            ${{ secrets.DOCKER_USERNAME }}/watchlist-service:latest
